#lang rhombus/static/and_meta
import:
  lib("esterel/kernel.rkt"):
    expose #{present?}
  lib("esterel/private/kernel.rkt") as pkernel:
    expose #{mk-signal.args}
    expose #{esterel/proc}
    expose #{par/proc}
    expose #{with-trap/proc}
    expose #{run-and-kill-signals!}
  lib("syntax/location.rkt"):
    expose #{quote-srcloc}

export:
  def_signal
  esterel
  ¿
  |||
  par
  emit
  react
  with_trap
  exit_trap
  with_signals
  pause
  signal_name

defn.macro 'def_signal: $id ...':
  def [srclocs, ...] = [expr_meta.pack_s_exp(['#{quote-srcloc}',id]), ...]
  'def $id : #{mk-signal.args}(#'$id, #false, $srclocs)
   ...'

expr.macro 'esterel:
              $body
              ...':
  '#{esterel/proc}(0,
                   fun ():
                     $body
                     ...)'

operator ¿ x:
  ~stronger_than |||
  #{present?}(x)

expr.macro '$left ||| $right':
  '#{par/proc}([fun (): $left, fun(): $right])'

fun emit(s):
  kernel.emit(s)

fun react(r, ~emit: signals = []):
  kernel.#{react!}(r, ~emit: signals)

expr.macro 'with_trap $t:
              $body
              ...':
  '#{with-trap/proc}(#'$t,fun ($t):
                            $body
                            ...)'

expr.macro 'with_signals {$id, ...}:
              $bodies
              ...':
  def [srclocs, ...] = [expr_meta.pack_s_exp(['#{quote-srcloc}',id]), ...]
  'begin:
     def $id: #{mk-signal.args}(#'$id, #false, $srclocs)
     ...
     #{run-and-kill-signals!}([$id,...],fun (): $bodies ...)'

expr.macro 'par
            | $body
              ...
            | ...':
  '#{par/proc}([fun ():
                  $body
                  ..., ...])'

expr.macro 'pause':
  'kernel.pause()'

fun exit_trap(t):
  kernel.#{exit-trap}(t)

fun signal_name(s):
  kernel.#{signal-name}(s)
